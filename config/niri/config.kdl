// 此配置文件采用 KDL 格式：https://kdl.dev
// "/-" 注释掉后面的节点。
// 查看 wiki 获取完整的配置说明：
// https://yalter.github.io/niri/Configuration:-Introduction

// 输入设备配置。
// 在 wiki 上查找完整的选项列表：
// https://yalter.github.io/niri/Configuration:-Input
input {
    keyboard {
        xkb {
            // 你可以设置 rules、model、layout、variant 和 options。
            // 更多信息请参考 xkeyboard-config(7)。

            // 例如：
            layout "us"
            // options "grp:win_space_toggle,compose:ralt,ctrl:nocaps"

            // 如果此部分为空，niri 将从 org.freedesktop.locale1 获取 xkb 设置。
            // 你可以使用 localectl set-x11-keymap 来控制这些设置。
        }

        // 启动时启用数字锁定，省略此设置将禁用它。
        numlock
    }

    // 接下来的部分包含 libinput 设置。
    // 省略设置将禁用它们，或保留其默认值。
    // 这里所有注释掉的设置都是示例，不是默认值。
    touchpad {
        // off
        tap
        // dwt
        // dwtp
        // drag false
        // drag-lock
        natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
        // scroll-method "two-finger"
        // disabled-on-external-mouse
    }

    mouse {
        // off
        // natural-scroll
        accel-speed -0.8
        // accel-profile "flat"
        // scroll-method "no-scroll"
    }

    trackpoint {
        // off
        // natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
        // scroll-method "on-button-down"
        // scroll-button 273
        // scroll-button-lock
        // middle-emulation
    }

    // 取消注释此行，使鼠标在聚焦新窗口时跳转到窗口中心。
    // warp-mouse-to-focus

    // 当鼠标移动到窗口和输出设备时自动聚焦它们。
    // 设置 max-scroll-amount="0%" 使其仅对已完全显示在屏幕上的窗口生效。
    // focus-follows-mouse max-scroll-amount="0%"
}

// 你可以通过输出设备的名称来配置它们，你可以在 niri 实例中运行 `niri msg outputs` 来查找名称。
// 内置笔记本电脑显示器通常称为 "eDP-1"。
// 在 wiki 上查找更多信息：
// https://yalter.github.io/niri/Configuration:-Outputs
// 记得通过删除 "/-" 来取消注释节点！
output "eDP-1" {
    // 取消注释此行以禁用此输出设备。
    // off

    // 输出设备的分辨率和可选的刷新率。
    // 格式为 "<宽度>x<高度>" 或 "<宽度>x<高度>@<刷新率>"。
    // 如果省略刷新率，niri 将为该分辨率选择最高刷新率。
    // 如果完全省略模式或模式无效，niri 将自动选择一个。
    // 在 niri 实例中运行 `niri msg outputs` 来列出所有输出设备及其模式。
    mode "1920x1080@144"

    // 你可以使用整数或小数比例，例如使用 1.5 表示 150% 缩放。
    scale 1

    // Transform 允许逆时针旋转输出设备，有效值为：
    // normal, 90, 180, 270, flipped, flipped-90, flipped-180 和 flipped-270。
    transform "normal"

    // 输出设备在全局坐标空间中的位置。
    // 这会影响方向性显示器操作如 "focus-monitor-left" 和光标移动。
    // 光标只能在直接相邻的输出设备之间移动。
    // 定位时必须考虑输出设备的缩放和旋转：
    // 输出设备的大小以逻辑像素或缩放像素为单位。
    // 例如，一个 3840×2160 的输出设备，缩放比例为 2.0，其逻辑大小为 1920×1080，
    // 因此要将另一个输出设备直接放在其右侧，将其 x 设置为 1920。
    // 如果未设置位置或导致重叠，输出设备将自动放置。
    //position x=1920 y=0
}
// output "HDMI-A-1"{
//   mode "1920x1080@75"
//   position x=0 y=0
// }





// 影响窗口定位和大小的设置。
// 在 wiki 上查找更多信息：
// https://yalter.github.io/niri/Configuration:-Layout
layout {
    // 设置窗口周围的间隙（逻辑像素）。
    gaps 16
    background-color "transparent"
    // 何时在改变焦点时居中列，选项有：
    // - "never"，默认行为，聚焦屏幕外的列将保持在屏幕的左边缘或右边缘。
    // - "always"，聚焦的列将始终居中。
    // - "on-overflow"，如果列与先前聚焦的列一起显示不下，则居中该列。
    center-focused-column "never"

    // 你可以自定义 "switch-preset-column-width" (Mod+R) 切换的宽度。
    preset-column-widths {
        // Proportion 将宽度设置为输出设备宽度的比例，考虑间隙。
        // 例如，你可以在一个输出设备上完美放置四个 "proportion 0.25" 大小的窗口。
        // 默认预设宽度是输出设备的 1/3、1/2 和 2/3。
        proportion 0.33333
        proportion 0.5
        proportion 0.66667

        // Fixed 精确设置宽度（逻辑像素）。
        // fixed 1920
    }

    // 你也可以自定义 "switch-preset-window-height" (Mod+Shift+R) 切换的高度。
    // preset-window-heights { }

    // 你可以更改新窗口的默认宽度。
    default-column-width { proportion 0.5; }
    // 如果你保留括号为空，窗口将自行决定其初始宽度。
    // default-column-width {}

    // 默认情况下，焦点环和边框作为实心背景矩形在窗口后面渲染。
    // 也就是说，它们会透过半透明窗口显示出来。
    // 这是因为使用客户端装饰的窗口可以具有任意形状。
    //
    // 如果你不喜欢这样，你应该取消注释下面的 `prefer-no-csd`。
    // Niri 将在同意省略其客户端装饰的窗口*周围*绘制焦点环和边框。
    //
    // 或者，你可以使用名为 `draw-border-with-background` 的窗口规则来覆盖它。

    // 你可以更改焦点环的外观。
    focus-ring {
        // 取消注释此行以禁用焦点环。
        // off

        // 环从窗口向外延伸的逻辑像素数。
        width 4

        // 颜色可以通过多种方式设置：
        // - CSS 命名颜色："red"
        // - RGB 十六进制："#rgb"、"#rgba"、"#rrggbb"、"#rrggbbaa"
        // - CSS 样式表示法："rgb(255, 127, 0)"、rgba()、hsl() 等。
        // active-gradient from="rgba(127,200,255,0.8)" to="rgba(127,200,255,0.2)" angle=0
        // 活动显示器上环的颜色。
        // active-color "#7fc8ff"
        active-color "rgba(255, 100, 0, 0.33)"
        inactive-color "rgba(80, 80, 80, 0.5)"
        // 非活动显示器上环的颜色。
        //
        // 焦点环只围绕活动窗口绘制，所以唯一能看到其 inactive-color 的地方是在其他显示器上。
        // inactive-color "#505050"

        // 你也可以使用渐变。它们优先于纯色。
        // 渐变渲染方式与 CSS linear-gradient(angle, from, to) 相同。
        // 角度与 linear-gradient 中的相同，是可选的，
        // 默认为 180（从上到下的渐变）。
        // 你可以使用网上的任何 CSS linear-gradient 工具来设置这些。
        // 也支持更改颜色空间，更多信息请查看 wiki。
        //
        // active-gradient from="#80c8ff" to="#c7ff7f" angle=45

        // 你也可以相对于整个工作区视图而不是仅相对于窗口本身来着色渐变。
        // 为此，设置 relative-to="workspace-view"。
        //
        // inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
    }

    // 你也可以添加边框。它类似于焦点环，但始终可见。
    border {
        // 设置与焦点环相同。
        // 如果你启用边框，你可能想要禁用焦点环。
        off

        width 4
        active-color "#ffc87f"
        inactive-color "#505050"

        // 请求你注意的窗口周围的边框颜色。
        urgent-color "#9b0000"

        // 渐变可以使用几种不同的插值颜色空间。
        // 例如，这是一个通过 in="oklch longer hue" 的柔和彩虹渐变。
        //
        // active-gradient from="#e5989b" to="#ffb4a2" angle=45 relative-to="workspace-view" in="oklch longer hue"

        // inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
    }

    // 你可以为窗口启用投影。
    shadow {
        // 取消注释下一行以启用投影。
        // on

        // 默认情况下，投影只围绕其窗口绘制，而不是在其后面。
        // 取消注释此设置以使投影在其窗口后面绘制。
        //
        // 注意 niri 无法知道 CSD 窗口的圆角半径。
        // 它必须假设窗口有直角，导致在 CSD 圆角内部出现投影伪影。
        // 此设置修复了这些伪影。
        //
        // 但是，你可能想要设置 prefer-no-csd 和/或
        // geometry-corner-radius。然后，niri 将知道圆角半径并
        // 正确绘制投影，而不必在窗口后面绘制。
        // 如果窗口绘制了任何客户端投影，这些设置也会移除它们。
        //
        // draw-behind-window true

        // 你可以更改投影的外观。下面的值以逻辑像素为单位，
        // 并与 CSS box-shadow 属性匹配。

        // Softness 控制投影模糊半径。
        softness 30

        // Spread 扩展投影。
        spread 5

        // Offset 相对于窗口移动投影。
        offset x=0 y=5

        // 你也可以更改投影颜色和不透明度。
        color "#0007"
    }

    // Struts 缩小窗口占用的区域，类似于 layer-shell 面板。
    // 你可以将它们视为一种外部间隙。它们以逻辑像素设置。
    // 左侧和右侧的 struts 将导致侧面的下一个窗口始终可见。
    // 顶部和底部的 struts 将简单地添加外部间隙，除了
    // layer-shell 面板和常规间隙占用的区域。
    struts {
        // left 64
        // right 64
        // top 64
        // bottom 64
    }
}

// 添加类似这样的行以在启动时生成进程。
// 注意，作为会话运行 niri 支持 xdg-desktop-autostart，
// 使用它可能更方便。
// 查看下面的 binds 部分获取更多 spawn 示例。

// 此行启动 waybar，一个常用的 Wayland 合成器栏。

//spawn-at-startup "waybar"

spawn-at-startup "/home/verfox/.config/niri/sh/swww-d.sh"

// spawn-at-startup {
//     // 在闲置 300 秒（5分钟）后，锁定屏幕
//     command = "swayidle"
//     args = ["timeout", "300", "swaylock -f"]

//     // 在锁定后，再闲置 10 秒，关闭屏幕
//     command = "swayidle"
//     args = ["timeout", "10", "sleep 1 && 'wlr-randr' --output eDP-1 --off"]

//     // 当用户有活动时（比如移动鼠标），恢复屏幕亮度
//     command = "swayidle"
//     args = ["resume", "'wlr-randr' --output eDP-1 --on"]
// }


// spawn-at-startup "fcitx5"

overview {
    zoom 0.4
    //backdrop-color "#34294eff"

    workspace-shadow {
        // off
        // Softness 控制投影模糊半径。
        softness 60
        // Spread 扩展投影。
        spread 30
        // Offset 相对于窗口移动投影。
        offset x=0 y=0
        // 你也可以更改投影颜色和不透明度。
        color "#000000ff"
    }
}

// Make the wallpaper stationary, rather than moving with workspaces.
layer-rule {
    // This is for swaybg; change for other wallpaper tools.
    // Find the right namespace by running niri msg layers.
    match namespace="^wallpaper$"
    //match namespace="^launcher$"
    place-within-backdrop true
}



//cursor {
    //xcursor-theme "breeze_cursors"
    //xcursor-size 25

    // Hide the cursor after one second of inactivity.
    //hide-after-inactive-ms 1000
//}
// layout {
//     background-color "#003300"
// }
// spawn-sh-at-startup "while true; do xdg-screensaver reset; sleep 240; brightnessctl --class=backlight set 10%; sleep 60; xdg-screensaver lock; done &"
// spawn-at-startup "waybar"
// 要运行 shell 命令（带变量、管道等），使用 spawn-sh-at-startup：
// spawn-sh-at-startup "qs -c ~/source/qs/MyAwesomeShell"

hotkey-overlay {
    // 取消注释此行以在启动时禁用"重要快捷键"弹出窗口。
    // skip-at-startup
}

// 取消注释此行以请求客户端尽可能省略其客户端装饰。
// 如果客户端特别请求 CSD，该请求将被接受。
// 此外，客户端将被告知它们被平铺，移除一些客户端圆角。
// 此选项还将修复一些半透明窗口后面的边框/焦点环绘制。
// 启用或禁用此选项后，你需要重启应用程序才能生效。
// prefer-no-csd

// 你可以更改截图保存的路径。
// 开头的 ~ 将扩展为主目录。
// 路径使用 strftime(3) 格式化，为你提供截图的日期和时间。
screenshot-path "~/Pictures/Screenshots/Screenshot from %Y-%m-%d %H-%M-%S.png"

// 你也可以将其设置为 null 以禁用将截图保存到磁盘。
// screenshot-path null

// 动画设置。
// wiki 解释了如何配置单个动画：
// https://yalter.github.io/niri/Configuration:-Animations
animations {
    // 取消注释以关闭所有动画。
    // off

    // 按此系数减慢所有动画。低于 1 的值会加快动画速度。
    // slowdown 3.0
}

// 窗口规则让你可以调整单个窗口的行为。
// 在 wiki 上查找更多信息：
// https://yalter.github.io/niri/Configuration:-Window-Rules

// 解决 WezTerm 初始配置错误
// 通过设置空的 default-column-width。
window-rule {
    // 这个正则表达式特意尽可能具体，
    // 因为这是默认配置，我们不想要误报。
    // 如果你愿意，可以只用 app-id="wezterm"。
    match app-id=r#"^org\.wezfurlong\.wezterm$"#
    match app-id="wechat$"
    match app-id=r#"wechat$"# title="^图片和视频$"
    default-column-width { proportion 0.5; }
}


window-rule {
    match app-id="^steam" title="^好友列表$"
    default-column-width { proportion 0.33333; }
}

window-rule {
    match app-id="^steam" title="^Steam$"
    open-maximized true
}

// 默认以浮动模式打开 Firefox 画中画播放器。
window-rule {
    // 这个 app-id 正则表达式适用于两者：
    // - 主机 Firefox (app-id 是 "firefox")
    // - Flatpak Firefox (app-id 是 "org.mozilla.firefox")
    match app-id=r#"firefox$"# title="^Picture-in-Picture$"
    match app-id=r#"firefox$"# title="^画中画$"
    match app-id=r#""# title="^画中画$"
    match app-id=r#"wofi"# title="^wofi$"
    open-floating true
}
// 示例：从屏幕捕获中屏蔽两个密码管理器。
// （此示例规则前面用 "/-" 注释掉了。）
/-window-rule {
    match app-id=r#"^org\.keepassxc\.KeePassXC$"#
    match app-id=r#"^org\.gnome\.World\.Secrets$"#

    block-out-from "screen-capture"

    // 如果你希望它们在第三方截图工具中可见，请改用此设置。
    // block-out-from "screencast"
}

// 示例：为所有窗口启用圆角。
// （此示例规则前面用 "/-" 注释掉了。）
window-rule {
    geometry-corner-radius 12
    clip-to-geometry true
}

binds {
    // 按键由用 + 号分隔的修饰符组成，最后是 XKB 键名。
    // 要查找特定键的 XKB 名称，你可以使用像 wev 这样的程序。
    //
    // "Mod" 是一个特殊的修饰符，在 TTY 上运行时等于 Super，
    // 在作为 winit 窗口运行时等于 Alt。
    //
    // 你可以在这里绑定的大多数操作也可以通过 `niri msg action do-something` 以编程方式调用。

    // Mod-Shift-/，通常与 Mod-? 相同，
    // 显示重要快捷键列表。
    Mod+Shift+Slash { show-hotkey-overlay; }
    
    // 建议的程序运行绑定：终端、应用程序启动器、屏幕锁定器。
    Mod+T hotkey-overlay-title="打开终端：alacritty" { spawn "kitty"; }
    Mod+S hotkey-overlay-title="运行应用程序启动器：wofi --show drun" { spawn "wofi"; }
    Super+Alt+L hotkey-overlay-title="锁定屏幕：swaylock" { spawn "swaylock"; }

    // 使用 spawn-sh 运行 shell 命令。如果你需要管道、多个命令等，请这样做。
    // 注意：整个命令作为单个参数传递。它原样传递给 `sh -c`。
    // 例如，这是一个切换屏幕阅读器 (orca) 的标准绑定。
    Super+Alt+S allow-when-locked=true hotkey-overlay-title=null { spawn-sh "pkill orca || exec orca"; }

    // PipeWire & WirePlumber 的音量键映射示例。
    // allow-when-locked=true 属性使它们在会话锁定时也能工作。
    // 使用 spawn-sh 允许将多个参数与命令一起传递。
    XF86AudioRaiseVolume allow-when-locked=true { spawn-sh "wpctl set-volume @DEFAULT_AUDIO_SINK@ 0.02+"; }
    XF86AudioLowerVolume allow-when-locked=true { spawn-sh "wpctl set-volume @DEFAULT_AUDIO_SINK@ 0.02-"; }
    XF86AudioMute        allow-when-locked=true { spawn-sh "wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle"; }
    XF86AudioMicMute     allow-when-locked=true { spawn-sh "wpctl set-mute @DEFAULT_AUDIO_SOURCE@ toggle"; }

    // 使用 playerctl 的媒体键映射示例。
    // 这将适用于任何支持 MPRIS 的媒体播放器。
    XF86AudioPlay        allow-when-locked=true { spawn-sh "playerctl play-pause"; }
    XF86AudioStop        allow-when-locked=true { spawn-sh "playerctl stop"; }
    XF86AudioPrev        allow-when-locked=true { spawn-sh "playerctl previous"; }
    XF86AudioNext        allow-when-locked=true { spawn-sh "playerctl next"; }

    // brightnessctl 的亮度键映射示例。
    // 你也可以使用带多个参数的常规 spawn（避免通过 "sh"），
    // 但你需要手动将每个参数放在单独的 "" 引号中。
    XF86MonBrightnessUp allow-when-locked=true { spawn "brightnessctl" "--class=backlight" "set" "+10%"; }
    XF86MonBrightnessDown allow-when-locked=true { spawn "brightnessctl" "--class=backlight" "set" "10%-"; }

    // 打开/关闭概览：工作区和窗口的缩放视图。
    // 你也可以将鼠标移动到左上角热角，
    // 或在触摸板上进行四指向上滑动。
    Mod+Tab repeat=false { toggle-overview; }

    Mod+Q repeat=false { close-window; }

    Mod+Left  { focus-column-left; }
    Mod+Down  { focus-window-down; }
    Mod+Up    { focus-window-up; }
    Mod+Right { focus-column-right; }
    Mod+H     { focus-column-left; }
    Mod+J     { focus-window-down; }
    Mod+K     { focus-window-up; }
    Mod+L     { focus-column-right; }

    Mod+Ctrl+Left  { move-column-left; }
    Mod+Ctrl+Down  { move-window-down; }
    Mod+Ctrl+Up    { move-window-up; }
    Mod+Ctrl+Right { move-column-right; }
    Mod+Ctrl+H     { move-column-left; }
    Mod+Ctrl+J     { move-window-down; }
    Mod+Ctrl+K     { move-window-up; }
    Mod+Ctrl+L     { move-column-right; }

    // 当到达列中的第一个或最后一个窗口时，
    // 在工作区之间移动的替代命令。
    // Mod+J     { focus-window-or-workspace-down; }
    // Mod+K     { focus-window-or-workspace-up; }
    // Mod+Ctrl+J     { move-window-down-or-to-workspace-down; }
    // Mod+Ctrl+K     { move-window-up-or-to-workspace-up; }

    Mod+Home { focus-column-first; }
    Mod+End  { focus-column-last; }
    Mod+Ctrl+Home { move-column-to-first; }
    Mod+Ctrl+End  { move-column-to-last; }

    Mod+Shift+Left  { focus-monitor-left; }
    Mod+Shift+Down  { focus-monitor-down; }
    Mod+Shift+Up    { focus-monitor-up; }
    Mod+Shift+Right { focus-monitor-right; }
    Mod+Shift+H     { focus-monitor-left; }
    Mod+Shift+J     { focus-monitor-down; }
    Mod+Shift+K     { focus-monitor-up; }
    Mod+Shift+L     { focus-monitor-right; }

    Mod+Shift+Ctrl+Left  { move-column-to-monitor-left; }
    Mod+Shift+Ctrl+Down  { move-column-to-monitor-down; }
    Mod+Shift+Ctrl+Up    { move-column-to-monitor-up; }
    Mod+Shift+Ctrl+Right { move-column-to-monitor-right; }
    Mod+Shift+Ctrl+H     { move-column-to-monitor-left; }
    Mod+Shift+Ctrl+J     { move-column-to-monitor-down; }
    Mod+Shift+Ctrl+K     { move-column-to-monitor-up; }
    Mod+Shift+Ctrl+L     { move-column-to-monitor-right; }

    // 或者，有只移动单个窗口的命令：
    // Mod+Shift+Ctrl+Left  { move-window-to-monitor-left; }
    // ...

    // 你也可以将整个工作区移动到另一个显示器：
    // Mod+Shift+Ctrl+Left  { move-workspace-to-monitor-left; }
    // ...

    Mod+Page_Down      { focus-workspace-down; }
    Mod+Page_Up        { focus-workspace-up; }
    Mod+U              { focus-workspace-down; }
    Mod+I              { focus-workspace-up; }
    Mod+Ctrl+Page_Down { move-column-to-workspace-down; }
    Mod+Ctrl+Page_Up   { move-column-to-workspace-up; }
    Mod+Ctrl+U         { move-column-to-workspace-down; }
    Mod+Ctrl+I         { move-column-to-workspace-up; }

    // 或者，有只移动单个窗口的命令：
    // Mod+Ctrl+Page_Down { move-window-to-workspace-down; }
    // ...

    Mod+Shift+Page_Down { move-workspace-down; }
    Mod+Shift+Page_Up   { move-workspace-up; }
    Mod+Shift+U         { move-workspace-down; }
    Mod+Shift+I         { move-workspace-up; }

    // 你可以使用以下语法绑定鼠标滚轮滚动刻度。
    // 这些绑定将根据 natural-scroll 设置改变方向。
    //
    // 为避免非常快速地滚动工作区，你可以使用
    // cooldown-ms 属性。绑定将被限制为此值的速率。
    // 你可以在任何绑定上设置冷却时间，但对滚轮最有用。
    Mod+WheelScrollDown      cooldown-ms=150 { focus-workspace-down; }
    Mod+WheelScrollUp        cooldown-ms=150 { focus-workspace-up; }
    Mod+Ctrl+WheelScrollDown cooldown-ms=150 { move-column-to-workspace-down; }
    Mod+Ctrl+WheelScrollUp   cooldown-ms=150 { move-column-to-workspace-up; }

    Mod+WheelScrollRight      { focus-column-right; }
    Mod+WheelScrollLeft       { focus-column-left; }
    Mod+Ctrl+WheelScrollRight { move-column-right; }
    Mod+Ctrl+WheelScrollLeft  { move-column-left; }

    // 通常在应用程序中按住 Shift 上下滚动会导致
    // 水平滚动；这些绑定复制了这种行为。
    Mod+Shift+WheelScrollDown      { focus-column-right; }
    Mod+Shift+WheelScrollUp        { focus-column-left; }
    Mod+Ctrl+Shift+WheelScrollDown { move-column-right; }
    Mod+Ctrl+Shift+WheelScrollUp   { move-column-left; }

    // 类似地，你可以绑定触摸板滚动"刻度"。
    // 触摸板滚动是连续的，所以对于这些绑定，它被分成
    // 离散的间隔。
    // 这些绑定也受触摸板的 natural-scroll 影响，所以这些
    // 示例绑定是"反转的"，因为我们默认对触摸板启用了 natural-scroll。
    // Mod+TouchpadScrollDown { spawn-sh "wpctl set-volume @DEFAULT_AUDIO_SINK@ 0.02+"; }
    // Mod+TouchpadScrollUp   { spawn-sh "wpctl set-volume @DEFAULT_AUDIO_SINK@ 0.02-"; }

    // 你可以通过索引引用工作区。但是，请记住
    // niri 是一个动态工作区系统，所以这些命令有点
    // "尽力而为"。尝试引用大于当前工作区数量的
    // 工作区索引将改为引用最底部
    // （空的）工作区。
    //
    // 例如，有 2 个工作区 + 1 个空工作区，索引 3、4、5 等
    // 都将引用第 3 个工作区。
    Mod+1 { focus-workspace 1; }
    Mod+2 { focus-workspace 2; }
    Mod+3 { focus-workspace 3; }
    Mod+4 { focus-workspace 4; }
    Mod+5 { focus-workspace 5; }
    Mod+6 { focus-workspace 6; }
    Mod+7 { focus-workspace 7; }
    Mod+8 { focus-workspace 8; }
    Mod+9 { focus-workspace 9; }
    Mod+Ctrl+1 { move-column-to-workspace 1; }
    Mod+Ctrl+2 { move-column-to-workspace 2; }
    Mod+Ctrl+3 { move-column-to-workspace 3; }
    Mod+Ctrl+4 { move-column-to-workspace 4; }
    Mod+Ctrl+5 { move-column-to-workspace 5; }
    Mod+Ctrl+6 { move-column-to-workspace 6; }
    Mod+Ctrl+7 { move-column-to-workspace 7; }
    Mod+Ctrl+8 { move-column-to-workspace 8; }
    Mod+Ctrl+9 { move-column-to-workspace 9; }

    // 或者，有只移动单个窗口的命令：
    // Mod+Ctrl+1 { move-window-to-workspace 1; }

    // 在当前工作区和上一个工作区之间切换焦点。
    // Mod+Tab { focus-workspace-previous; }

    // 以下绑定将聚焦的窗口移入和移出列。
    // 如果窗口是单独的，它们将把它吸收到侧面的附近列中。
    // 如果窗口已经在列中，它们将把它驱逐出去。
    Mod+BracketLeft  { consume-or-expel-window-left; }
    Mod+BracketRight { consume-or-expel-window-right; }

    // 从右侧吸收一个窗口到聚焦列的底部。
    Mod+Comma  { consume-window-into-column; }
    // 将底部窗口从聚焦列驱逐到右侧。
    Mod+Period { expel-window-from-column; }

    Mod+R { switch-preset-column-width; }
    // 也可以反向循环预设。
    // Mod+R { switch-preset-column-width-back; }
    Mod+Shift+R { switch-preset-window-height; }
    Mod+Ctrl+R { reset-window-height; }
    Mod+F { maximize-column; }
    Mod+Shift+F { fullscreen-window; }

    // 将聚焦的列扩展到未被其他完全可见列占用的空间。
    // 使列"填充剩余空间"。
    Mod+Ctrl+F { expand-column-to-available-width; }

    Mod+C { center-column; }

    // 将屏幕上所有完全可见的列居中。
    Mod+Ctrl+C { center-visible-columns; }

    // 更精细的宽度调整。
    // 此命令还可以：
    // * 以像素设置宽度："1000"
    // * 以像素调整宽度："-5" 或 "+5"
    // * 以屏幕宽度百分比设置宽度："25%"
    // * 以屏幕宽度百分比调整宽度："-10%" 或 "+10%"
    // 像素大小使用逻辑像素或缩放像素。即在缩放比例为 2.0 的输出设备上，
    // set-column-width "100" 将使列占用 200 个物理屏幕像素。
    Mod+Minus { set-column-width "-10%"; }
    Mod+Equal { set-column-width "+10%"; }

    // 在与其他窗口同列时进行更精细的高度调整。
    Mod+Shift+Minus { set-window-height "-10%"; }
    Mod+Shift+Equal { set-window-height "+10%"; }

    // 在浮动和平铺布局之间移动聚焦的窗口。
    Mod+V       { toggle-window-floating; }
    Mod+Shift+V { switch-focus-between-floating-and-tiling; }

    // 切换列标签显示模式。
    // 此列中的窗口将显示为垂直标签，
    // 而不是堆叠在彼此之上。
    Mod+W { toggle-column-tabbed-display; }

    // 切换布局的操作。
    // 注意：如果你取消注释这些，请确保你没有
    // 在上面配置匹配的布局切换快捷键。
    // 同时在同一个快捷键上设置两者会破坏切换，
    // 因为按下快捷键时会切换两次（一次由 xkb，一次由 niri）。
    // Mod+Space       { switch-layout "next"; }
    // Mod+Shift+Space { switch-layout "prev"; }

    Print { screenshot; }
    Ctrl+Print { screenshot-screen; }
    Alt+Print { screenshot-window; }

    // 远程桌面客户端和软件 KVM 切换器等应用程序可能
    // 请求 niri 停止处理此处定义的键盘快捷键，
    // 以便它们可以，例如，将按键按原样转发到远程机器。
    // 绑定一个逃生舱口来切换抑制器是个好主意，
    // 这样有问题的应用程序就不能劫持你的会话。
    //
    // allow-inhibiting=false 属性也可以应用于其他绑定，
    // 这确保 niri 始终处理它们，即使抑制器处于活动状态。
    Mod+Escape allow-inhibiting=false { toggle-keyboard-shortcuts-inhibit; }

    // quit 操作将显示确认对话框以避免意外退出。
    Mod+Shift+E { quit; }
    Ctrl+Alt+Delete { quit; }

    // 关闭显示器。要重新打开它们，进行任何输入如
    // 移动鼠标或按下任何其他键。
    Mod+Shift+P { power-off-monitors;}
}
