## CAVA的配置文件。
# 删除分号以更改参数。


[general]

# 平滑模式。可以是'normal'（普通）、'scientific'（科学）或'waves'（波浪）。自0.6.0版本起已弃用
; mode = normal

# 只接受非负值。
framerate = 24

# 'autosens'将在条形图达到峰值时尝试降低灵敏度。1 = 开启，0 = 关闭
# 自0.6.0版本起新增的低值（动态范围）自动灵敏度
# 'overshoot'允许条形图超过（以终端高度的百分比表示）而不会启动自动灵敏度。自0.6.0版本起已弃用
autosens = 1
; overshoot = 20

# 手动灵敏度百分比。如果启用了自动灵敏度，这将只是初始值。
# 200表示双倍高度。只接受非负值。
sensitivity = 80

# 条形图的数量（0-512）。0设置为自动（填满控制台）。
# 条形图的宽度和条形图之间的间距（以字符数计）。
bars = 16
; bar_width = 2
; bar_spacing = 1
# bar_height仅用于"noritake"格式的输出
; bar_height = 32

# 对于SDL，条形图的宽度和间距以像素为单位，默认值为：
; bar_width = 20
; bar_spacing = 5

# sdl_glsl具有这些默认值，它们仅用于计算最大条形图数量。
; bar_width = 1
; bar_spacing = 0


# 最低和最高条形图的较低和较高截止频率
# 可视化器的带宽。
# 注意：最小总带宽为43Mhz乘以条形图数量。
# 如果指定的频带太低，Cava将自动增加较高的截止频率。
; lower_cutoff_freq = 50
; higher_cutoff_freq = 10000


# 无输入的秒数，之后cava进入睡眠模式。Cava将不执行FFT或绘制，
# 每秒只检查一次输入。一旦检测到输入，Cava将唤醒。0 = 禁用。
; sleep_timer = 0


[input]

# 音频捕获方法。可能的方法是：'fifo'、'portaudio'、'pipewire'、'alsa'、'pulse'、'sndio'、'oss'、'jack'或'shmem'
# 默认为'oss'、'pipewire'、'sndio'、'jack'、'pulse'、'alsa'、'portaudio'或'fifo'，按此顺序，取决于cava构建时的支持。
# 在Mac上默认为'portaudio'或'fifo'
# 在Windows上这是自动的，不需要输入设置。
#
# 所有输入方法都使用相同的配置变量'source'
# 来定义它应该从哪里获取音频。
#
# 对于pulseaudio和pipewire，'source'将是源。默认：'auto'，使用默认接收器的监视源
# （所有pulseaudio接收器（输出）都有与之关联的'监视'源（输入））。
#
# 对于pipewire，'source'将是设备的对象名称或object.serial。
# 支持输入和输出设备。
#
# 对于alsa，'source'将是捕获设备。
# 对于fifo，'source'将是fifo文件的路径。
# 对于shmem，'source'将是/squeezelite-AA:BB:CC:DD:EE:FF，其中'AA:BB:CC:DD:EE:FF'将是squeezelite的MAC地址
#
# 对于sndio，'source'将是原始录制音频描述符或监视子设备，例如'rsnd/2'或'snd/1'。默认：'default'。
# README.md包含有关如何为sndio设置CAVA的更多信息。
#
# 对于oss，'source'将是音频设备的路径，例如'/dev/dsp2'。默认：'/dev/dsp'，即默认音频设备。
# README.md包含有关如何在FreeBSD上为OSS设置CAVA的更多信息。
#
# 对于jack，'source'将是连接到的JACK服务器的名称，例如'foobar'。默认：'default'。
# README.md包含有关如何为JACK设置CAVA的更多信息。
#

method = pipewire
source = auto

; method = alsa
; source = hw:Loopback,1

; method = fifo
; source = /tmp/mpd.fifo

; method = shmem
; source = /squeezelite-AA:BB:CC:DD:EE:FF

; method = portaudio
; source = auto

; method = sndio
; source = default

; method = oss
; source = /dev/dsp

; method = jack
; source = default

# 可以为某些输入方法配置选项'sample_rate'、'sample_bits'、'channels'和'autoconnect'：
#   sample_rate: fifo, pipewire, sndio, oss
#   sample_bits: fifo, pipewire, sndio, oss
#   channels:    sndio, oss, jack
#   autoconnect: jack
# 其他方法忽略这些设置。
#
# 对于'sndio'和'oss'，它们只是首选值，即如果值不被所选音频设备支持，
# 设备将使用其他支持的值。
# 例如：48000、32和2，但设备只支持44100、16和1，那么它
# 将使用44100、16和1。
#
sample_rate = 48000
sample_bits = 16
channels = 2
; autoconnect = 2


[output]

method = raw
raw_target = /dev/stdout
data_format = ascii

# 输出方法。可以是'ncurses'、'noncurses'、'raw'、'noritake'、'sdl'
# 或'sdl_glsl'。
# 'noncurses'（默认）使用缓冲区和光标移动只在终端中打印
# 帧与帧之间的变化。比'ncurses'使用更少的资源，并且更
# 不容易出现撕裂（垂直同步问题）。
#
# 'raw'是条形图高度的8或16位（可通过'bit_format'选项配置）数据
# 流，可用于发送到其他应用程序。
# 'raw'默认为200个条形图，可以在上面的'bars'选项中调整。
#
# 'noritake'输出一个Noritake VFD显示器期望的格式的位图
# 在图形模式下。目前只支持3000系列图形VFD。
#
# 'sdl'使用Simple DirectMedia Layer在图形上下文中渲染。
# 'sdl_glsl'使用SDL创建OpenGL上下文。编写自己的着色器或
# 使用预定义的着色器之一。
; method = noncurses

# 可视化的方向。可以是'bottom'（底部）、'top'（顶部）、'left'（左侧）、'right'（右侧）或
# 'horizontal'（水平）。默认是'bottom'。'left'和'right'只在sdl和ncurses输出上支持。
# 'horizontal'（条形图从中心上下移动）只在noncurses输出上支持。
# 注意：许多字体对于'bottom'以外方向使用的字符有奇怪或缺失的字形，
# 这可能使输出看起来不正确。
; orientation = bottom

# 可视化通道。可以是'stereo'（立体声）或'mono'（单声道）。
# 'stereo'镜像两个通道，低频率在中心。
# 'mono'从左到右输出最低到最高频率。
# 'mono_option'将mono设置为从'left'（左）、'right'（右）或'average'（平均）获取输入。
# 将'reverse'设置为1以相反方式显示频率。
; channels = stereo
; mono_option = average
; reverse = 0

# 原始输出目标。
# 在Linux上，如果目标不存在，将创建一个fifo。
# 在Windows上，如果目标不存在，将创建一个命名管道。
; raw_target = /dev/stdout

# 原始数据格式。可以是'binary'（二进制）或'ascii'。
; data_format = binary

# 二进制位格式，可以是'8bit'（0-255）或'16bit'（0-65530）。
; bit_format = 16bit

# Ascii最大值。在'ascii'模式下，范围将从0运行到此处指定的值
ascii_max_range = 100

# Ascii分隔符。在ascii格式中，每个条形图和帧都由分隔符分隔。
# 使用ascii表中的十进制值（即59 = ';'和10 = '\n'（换行））。
; bar_delimiter = 59
; frame_delimiter = 10

# sdl窗口大小和位置。-1,-1表示居中。
; sdl_width = 1000
; sdl_height = 500
; sdl_x = -1
; sdl_y= -1
; sdl_full_screen = 0

# 在x轴上设置条形图的标签。可以是'frequency'（频率）或'none'（无）。默认：'none'
# 'frequency'显示条形图上方的较低截止频率。
# 只在ncurses和noncurses输出上支持。
; xaxis = none
 
# 启用同步同步。1 = 开启，0 = 关闭
# 在alacritty终端模拟器中消除闪烁。
# 默认为关闭，因为在其他终端模拟器中的行为未知
; synchronized_sync = 0

# sdl_glsl的着色器，位于$HOME/.config/cava/shaders
; vertex_shader = pass_through.vert
; fragment_shader = bar_spectrum.frag

# 对于glsl输出模式，即使没有音频也继续渲染
; continuous_rendering = 0

# 在tty中禁用控制台空白（屏幕保护程序）
# （在FreeBSD上不支持）
; disable_blanking = 0

# 空闲时在屏幕底部显示一个平直的条形图，1 = 开启，0 = 关闭
; show_idle_bar_heads = 1

# 显示波形而不是频谱，1 = 开启，0 = 关闭
; waveform = 0

[color]

# 颜色可以是七种预定义颜色之一：black（黑色）、blue（蓝色）、cyan（青色）、green（绿色）、magenta（品红）、red（红色）、white（白色）、yellow（黄色）。
# 或由十六进制代码'#xxxxxx'定义（十六进制代码必须在引号内）。用户定义的颜色需要
# 一个可以改变颜色定义的终端，如Gnome-terminal或rxvt。
# 默认是保持当前终端颜色
; background = default
; foreground = default

# SDL和sdl_glsl只支持十六进制代码颜色，这些是默认值：
; background = '#111111'
; foreground = '#33ffff'


# 渐变模式，只支持十六进制定义的颜色，
# 背景也必须以十六进制定义或保持注释状态。1 = 开启，0 = 关闭。
# 您可以定义多达8种不同的颜色。它们从屏幕底部到顶部排列
; gradient = 0
; gradient_color_1 = '#59cc33'
; gradient_color_2 = '#80cc33'
; gradient_color_3 = '#a6cc33'
; gradient_color_4 = '#cccc33'
; gradient_color_5 = '#cca633'
; gradient_color_6 = '#cc8033'
; gradient_color_7 = '#cc5933'
; gradient_color_8 = '#cc3333'



[smoothing]

# 积分平滑的百分比值。取值范围为0 - 100。
# 较高的值意味着更平滑，但精度较低。0表示禁用。
# 自0.8.0版本起已弃用，请改用noise_reduction
; integral = 77

# 禁用或启用所谓的"Monstercat平滑"，带或不带"waves"。设置为0以禁用。
; monstercat = 0
; waves = 0

# 设置"下降"的重力百分比。较高的值意味着条形图将下降得更快。
# 只接受非负值。50表示一半重力，200表示双倍。设置为0以禁用"下降"。
# 自0.8.0版本起已弃用，请改用noise_reduction
; gravity = 100


# 在条形图高度中，低于此值的条形图将不会被绘制。
# 自0.8.0版本起已弃用
; ignore = 0

# 降噪，整数0 - 100。默认77
# 原始可视化非常嘈杂，此因子调整积分和重力滤波器以保持信号平滑
# 100将非常缓慢和平滑，0将快速但嘈杂。
noise_reduction = 30


[eq]

# 这个比较复杂。你可以有任意多的键。
# 记住要取消注释多个键！更多的键 = 更高的精度。
# 在github上查看readme.md以获取更多解释和示例。
; 1 = 1 # 低音
; 2 = 1
; 3 = 1 # 中音
; 4 = 1
; 5 = 1 # 高音